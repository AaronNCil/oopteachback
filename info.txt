Encapsulation: Encapsulation is the practice of keeping an object's internal state and behavior hidden from the outside world, 
and providing a public interface for interacting with the object. In TypeScript, 
this can be achieved using the private, protected, and public keywords to control access to properties and methods.

Inheritance: Inheritance is the mechanism by which one class can inherit properties and methods from another class. 
This allows you to create a parent class with common functionality that can be shared by multiple child classes. In TypeScript, 
a class can extend another class using the extends keyword.

Polymorphism: Polymorphism is the ability for objects of different classes to be used interchangeably, 
because they implement a common interface. In TypeScript, this can be achieved through the use of interfaces 
and the implements keyword.

Abstraction: Abstraction is the process of reducing complexity by hiding unnecessary details. In TypeScript, 
this can be achieved through the use of abstract classes and methods. Abstract classes cannot be instantiated, 
but they can be extended by other classes, which must provide an implementation for the abstract methods.